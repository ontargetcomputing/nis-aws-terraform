name: Apply and Release

on:
  issue_comment:
    types: [created]

jobs:
  process-comment:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request 
    outputs:
      trigger: ${{ steps.check.outputs.trigger }}
    steps:
      - name: "Check for 'action: apply' comment"
        id: check
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          if [[ "$COMMENT_BODY" == *"action: apply"* ]]; then
            echo "Matched comment with 'action: apply'"
            echo "::set-output name=trigger::true"
          else
            echo "::set-output name=trigger::false"
          fi

  check-pr-status:
    needs: process-comment
    if: needs.process-comment.outputs.trigger == 'true'
    runs-on: ubuntu-latest
    outputs:
      approved: ${{ steps.check-reviews.outputs.approved }}
      checks_passed: ${{ steps.check-status.outputs.passed }}
      mergeable: ${{ steps.check-mergeable.outputs.mergeable }}
    steps:
      - name: Check PR Reviews
        id: check-reviews
        uses: actions/github-script@v7
        with:
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Check if there's at least one approval and no pending requested changes
            const latestReviews = new Map();
            reviews.forEach(review => {
              // Only consider actual reviews
              if (review.state !== 'COMMENTED') {
                latestReviews.set(review.user.id, review.state);
              }
            });
            
            const hasChangesRequested = Array.from(latestReviews.values()).includes('CHANGES_REQUESTED');
            const hasApproval = Array.from(latestReviews.values()).includes('APPROVED');
            
            const approved = hasApproval && !hasChangesRequested;
            core.setOutput('approved', approved.toString());
            
            if (!approved) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '❌ Cannot proceed: PR requires approvals or has pending requested changes.'
              });
            }

      - name: Check PR Status Checks
        id: check-status
        if: steps.check-reviews.outputs.approved == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });
            
            const failed = checks.check_runs.some(check => 
              check.status === 'completed' && check.conclusion !== 'success'
            );
            
            const pending = checks.check_runs.some(check => 
              check.status !== 'completed'
            );
            
            const passed = !failed && !pending;
            core.setOutput('passed', passed.toString());
            
            if (!passed) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '❌ Cannot proceed: Not all status checks have passed.'
              });
            }

      - name: Check Branch Status
        id: check-mergeable
        if: steps.check-reviews.outputs.approved == 'true' && steps.check-status.outputs.passed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            let mergeable = false;
            let message = '';
            
            // Check if branch is out of date
            if (pr.mergeable === false) {
              message = '❌ Cannot proceed: Branch is out of date with base branch. Please merge or rebase with the base branch.';
            } else if (pr.mergeable === null) {
              // GitHub is still calculating mergeability, we need to wait and retry
              let attempts = 0;
              while (attempts < 5) {
                await new Promise(resolve => setTimeout(resolve, 1000));
                const { data: updatedPr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number
                });
                if (updatedPr.mergeable !== null) {
                  mergeable = updatedPr.mergeable;
                  break;
                }
                attempts++;
              }
              if (!mergeable) {
                message = '❌ Cannot proceed: Unable to determine if branch is up to date. Please try again in a few moments.';
              }
            } else {
              mergeable = true;
            }
            
            core.setOutput('mergeable', mergeable.toString());
            
            if (!mergeable) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }

  identify_modified_workspace:
    needs: [process-comment, check-pr-status]
    if: |
      'true' == 'true' || (
      needs.process-comment.outputs.trigger == 'true' && 
      needs.check-pr-status.outputs.approved == 'true' && 
      needs.check-pr-status.outputs.checks_passed == 'true' &&
      needs.check-pr-status.outputs.mergeable == 'true' )
    uses: ./.github/workflows/identify_modified_workspace.yml

  apply_and_merge:
    needs: 
      - process-comment
      - check-pr-status
      - identify_modified_workspace
    if: |
      'true' == 'true' || (
      needs.identify_modified_workspace.outputs.workspace_path != '' && 
      needs.process-comment.outputs.trigger == 'true' && 
      needs.check-pr-status.outputs.approved == 'true' && 
      needs.check-pr-status.outputs.checks_passed == 'true' &&
      needs.check-pr-status.outputs.mergeable == 'true' )
    runs-on: ubuntu-latest
    steps:
      - name: Debug Output
        run: |
          echo "Process Comment Trigger: ${{ needs.process-comment.outputs.trigger }}"

      - name: Get PR Branch Information
        id: pr_info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch PR details using the issue URL
          PR_URL="${{ github.event.issue.pull_request.url }}"
          PR_DETAILS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$PR_URL")
          
          # Extract head and base branch names
          HEAD_REF=$(echo "$PR_DETAILS" | jq -r '.head.ref')
          echo "HEAD_REF=$HEAD_REF"
          echo "head_ref=$HEAD_REF" >> "$GITHUB_OUTPUT"
                
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr_info.outputs.head_ref }}
          fetch-depth: 0

      - name: Get branch information
        run: |
          echo "Current branch: $(git branch --show-current)"
          echo "Full ref: $(git rev-parse --abbrev-ref HEAD)"
          echo "Detailed branch info:"
          git branch -vv

      - name: Parse Command
        id: parse_command
        run: |
          COMMENT="${{ github.event.comment.body }}"
          
          # Check if comment starts with 'action: apply'
          if [[ ! "$COMMENT" =~ ^action:\ apply ]]; then
            echo "Comment must start with 'action: apply'"
            exit 1
          fi
          
          # Extract version bump
          VERSION_BUMP=$(echo "$COMMENT" | grep -oP 'semver: \K(major|minor|patch)' || echo '')
          if [[ -z "$VERSION_BUMP" ]]; then
            echo "Error: Invalid or missing semver specification."
            echo "Comment must follow format:"
            echo "action: apply"
            echo "semver: [major|minor|patch]"
            echo "comment: your comment here"
            exit 1
          fi
          VERSION_BUMP=$(echo "$VERSION_BUMP" | tr '[:lower:]' '[:upper:]')
          
          # Extract comment
          COMMENT_TEXT=$(echo "$COMMENT" | grep -oP 'comment: \K(.*)$' || echo '')
          if [[ -z "$COMMENT_TEXT" ]]; then
            echo "Error: Missing comment text"
            echo "Please provide a comment describing the changes"
            exit 1
          fi
          
          echo "version_bump=$VERSION_BUMP" >> $GITHUB_OUTPUT
          echo "comment_text=$COMMENT_TEXT" >> $GITHUB_OUTPUT

      - name: Comment on Invalid Format
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.issue.number }},
              body: `❌ Invalid comment format. Please use:
              
              action: apply
              semver: [major|minor|patch]
              comment: your comment here`
            });

      - name: Processing
        if: success()
        run: |
          echo "Version Bump: ${{ steps.parse_command.outputs.version_bump }}"
          echo "Comment Text: ${{ steps.parse_command.outputs.comment_text }}"
          echo "Workspace: ${{ needs.identify_modified_workspace.outputs.workspace_path }}"

      - name: Determine Version Bump
        id: version_bump
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORKSPACE: ${{ needs.identify_modified_workspace.outputs.workspace_path }}
          VERSION_BUMP: ${{ steps.parse_command.outputs.version_bump }}
        run: |
          WORKSPACE_TAGS=$(git ls-remote --tags origin | grep "${WORKSPACE}" | awk '{print $2}' | sed 's|refs/tags/||')
          HIGHEST_TAG=$(echo "$WORKSPACE_TAGS" | grep "^${WORKSPACE}-" | awk -F "${WORKSPACE}-" '{print $2}' | sort -V | tail -n 1)


          # If no tag exists, start at 0.0.1
          if [[ -z "$HIGHEST_TAG" ]]; then
              case "$VERSION_BUMP" in
                  "MAJOR")
                      NEW_VERSION="1.0.0"
                      ;;
                  "MINOR")
                      NEW_VERSION="0.1.0"
                      ;;
                  "PATCH")
                      NEW_VERSION="0.0.1"
                      ;;
              esac
          else
              # Split version into components
              MAJOR=$(echo "$HIGHEST_TAG" | cut -d. -f1)
              MINOR=$(echo "$HIGHEST_TAG" | cut -d. -f2)
              PATCH=$(echo "$HIGHEST_TAG" | cut -d. -f3)

              # Bump version according to type
              case "$VERSION_BUMP_TYPE" in
                  "MAJOR")
                      MAJOR=$((MAJOR + 1))
                      MINOR=0
                      PATCH=0
                      ;;
                  "MINOR")
                      MINOR=$((MINOR + 1))
                      PATCH=0
                      ;;
                  "PATCH")
                      PATCH=$((PATCH + 1))
                      ;;
              esac

              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi

          # Create full new tag
          NEW_TAG="$WORKSPACE-$NEW_VERSION"

          echo "Highest existing tag: $HIGHEST_TAG"
          echo "New version: $NEW_VERSION"
          echo "New tag: $NEW_TAG"

          # Set outputs for use in subsequent steps
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Use Version Bump
        run: |
          echo "New Version: ${{ steps.version_bump.outputs.version }}"
          echo "New Tag: ${{ steps.version_bump.outputs.tag }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform -chdir=${{ needs.identify_modified_workspace.outputs.workspace_path }} init

      - name: Create tfvars file
        run: |
          cd ${{ needs.identify_modified_workspace.outputs.workspace_path }}
          echo "semver = \"${{ steps.version_bump.outputs.version }}\"" >> terraform.tfvars
          echo "Content of terraform.tfvars:"
          cat terraform.tfvars

      - name: Terraform Apply
        id: apply
        run: |
          if terraform -chdir=${{ needs.identify_modified_workspace.outputs.workspace_path }} apply; then
            echo "apply_success=true" >> $GITHUB_OUTPUT
          else
            echo "apply_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Merge PR, Tag, and Delete Branch
        if: steps.apply.outputs.apply_success == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            try {
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });

              const branchName = pullRequest.head.ref;
              const commitMessage = `${pullRequest.title}\n\n${pullRequest.body || ''}\n\nComment: ${{ steps.parse_command.outputs.comment_text }}\n\nCloses #${context.issue.number}`;

              // 1. Merge the PR first
              const mergeResult = await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: 'squash',
                commit_title: commitMessage
              });

              // 2. Delete the branch immediately after merge
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branchName}`
              });

              // 3. Create tag on the merge commit
              await exec.exec('git', ['fetch', 'origin', 'main']);
              await exec.exec('git', ['config', 'user.name', 'github-actions']);
              await exec.exec('git', ['config', 'user.email', 'github-actions@github.com']);
              await exec.exec('git', ['tag', '${{ steps.version_bump.outputs.tag }}', mergeResult.data.sha]);
              await exec.exec('git', ['push', 'origin', '${{ steps.version_bump.outputs.tag }}']);

              // Add success comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `✅ Successfully completed:
                - Terraform apply successful
                - PR merged to main
                - Branch \`${branchName}\` deleted
                - Created tag ${steps.version_bump.outputs.tag} on merge commit`
              });

            } catch (error) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ Error during merge/cleanup process: ${error.message}`
              });
              throw error;
            }
