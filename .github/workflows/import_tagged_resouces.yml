name: 1 - Import Tagged Resources

on:
  workflow_dispatch: 
    inputs:
      worspace_path:
        description: 'The path to the workspace to import into'
        required: true
        type: choice
        options:
          - 'Please choose a workspace'
          - accounts/SBOX-9394/baseline/baseline-workspace
        default: 'Please choose a workspace'
      resources:
        description: 'resources - see https://github.com/GoogleCloudPlatform/terraformer'
        required: true
        default: "Please specify resource types"
        #default: "accessanalyzer,acm,alb,api_gateway,appsync,autoscaling,aws_facade,aws_provider,aws_service,batch,budgets,cloud9,cloud_front,cloudformation,cloudhsm,cloudtrail,cloudwatch,codebuild,codecommit,codedeploy,codepipeline,cognito,config,customer_gateway,datapipeline,devicefarm,docdb,dynamodb,ebs,ec2,ecr,ecrpublic,ecs,efs,eip,eks,elastic_beanstalk,elasticache,elb,emr,eni,es,firehose,glue,iam,identitystore,igw,kinesis,kms,lambda,logs,media_package,media_store,mq,msk,nacl,nat_gateway,opsworks,organization,qldb,rds,redshift,resourcegroups,route53,route_table,s3,secretsmanager,securityhub,servicecatalog,ses,sfn,sg,sg_test,sns,sqs,ssm,subnet,swf,transit_gateway,vgw,vpc,vpc_endpoint,vpc_peering,vpn_connection,waf,waf_regional,wafv2,workspaces"
      identifying_tag:
        description: 'The tag used to identify the resources to import'
        required: true
      # TODO : add multiple regions?
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'us-west-2'

# This is necessary for GitHub to request the OIDC token
permissions:
  id-token: write  # Required for OIDC
  contents: write

jobs:
  terraformer_import:
    runs-on: ubuntu-latest
    # Run only if not on main branch
    if: github.ref != 'refs/heads/main'  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}

      - name: Configure AWS OIDC
        id: aws-oidc
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::582983609964:role/github-actions-oidc-role"
          aws-region: us-west-2

      - name: Assume Cross-Account Role
        id: assume-role
        run: |
          export ROLE_ARN="arn:aws:iam::582983609964:role/balutbomber-github-admin-role"
          SESSION_NAME="terraformer-session"
          CREDS=$(aws sts assume-role --role-arn "$ROLE_ARN" --role-session-name "$SESSION_NAME" --query 'Credentials' --output json)
          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.SessionToken')" >> $GITHUB_ENV

      # Install Terraformer
      - name: Install Terraformer
        run: |
          wget https://github.com/GoogleCloudPlatform/terraformer/releases/download/0.8.24/terraformer-all-linux-amd64
          chmod +x terraformer-all-linux-amd64
          sudo mv terraformer-all-linux-amd64 /usr/local/bin/terraformer

      # Run terraform init to setup
      - name: Run terraform init
        working-directory: ${{ github.event.inputs.worspace_path }}
        run: |
          terraform init

      - name: Display original resources input
        run: |
          echo "Original resources input: '${{ github.event.inputs.resources }}'"

      - name: Remove all whitespace from resources input
        id: clean_input
        run: |
          # Remove all whitespace using sed
          cleaned_resources=$(echo "${{ github.event.inputs.resources }}" | sed 's/[[:space:]]//g')
          echo "cleaned_resources=$cleaned_resources" >> $GITHUB_OUTPUT
      
      - name: Show cleaned input
        run: |
          echo "Resouces input with all whitespace removed: '${{ steps.clean_input.outputs.cleaned_resources }}'"

      # Run Terraformer to generate the terraformer plan
      # NOTICE the '--profile ""' on the terraformer plan call.  There was an issue when that is not included.
      # Read https://github.com/GoogleCloudPlatform/terraformer/issues/940 for more info.
      - name: Run Terraformer to generate plan
        working-directory: ${{ github.event.inputs.worspace_path }}
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}        
        run: |
          echo "Running plan in ${{ github.event.inputs.worspace_path }}"
          echo "Running terraformer plan aws --resources=\"${{ steps.clean_input.outputs.cleaned_resources }}\" --filter=\"Name=tags.${{ github.event.inputs.identifying_tag }}\" --regions=\"${{ github.event.inputs.aws_region }}\" --profile \"\""
          terraformer plan aws --resources="${{ steps.clean_input.outputs.cleaned_resources }}" --filter="Name=tags.${{ github.event.inputs.identifying_tag }}" --regions="${{ github.event.inputs.aws_region }}" --profile ""

      - name: Show Plan
        working-directory: ${{ github.event.inputs.worspace_path }}
        run: |
          cat generated/aws/terraformer/plan.json
      
      # Attempt to "cook" the plan - this basically replaces the auto generated resource name given by 
      # Terraformer with the Name tag on the resource.  If no 'Name' tag exists, this will error out.
      - name: Cook Plan
        run: |
          python scripts/cook_plan.py  ${{ github.event.inputs.worspace_path }}/generated/aws/terraformer/plan.json

      - name: Run Terraformer to import plan
        working-directory: ${{ github.event.inputs.worspace_path }}
        run: |
          echo "Running the import in ${{ github.event.inputs.worspace_path }}"
          terraformer import plan generated/aws/terraformer/cooked_plan.json

      - name: Pull the current terraform state from terraform cloud
        working-directory: ${{ github.event.inputs.worspace_path }}
        run: |
          terraform state pull > generated/destination_terraform.tfstate

      - name: List Number of resources in the state we are importing into
        working-directory: "${{ github.event.inputs.worspace_path }}/generated"
        run: |
          terraform state list -state=./destination_terraform.tfstate > destination-resources.txt
          line_count=$(wc -l < destination-resources.txt)  
          echo "The destination state has $line_count resource(s)."

      - name: List Number or resources in each imported state before import
        working-directory: "${{ github.event.inputs.worspace_path }}/generated/aws"
        run: |
          IFS=','
          CLEANED_RESOURCES="${{ steps.clean_input.outputs.cleaned_resources }}"
          
          for dir in $CLEANED_RESOURCES; do
            if [ -d "$dir" ]; then
              echo "Processing directory: $dir"
              (
                cd "$dir" || exit
                terraform state list -state=./terraform.tfstate > source-resources.txt
                line_count=$(wc -l < source-resources.txt)  
                echo "The imported state for $dir has $line_count resource(s)."
              )
            else
              echo "Directory does not exist: $dir"
            fi
          done
          IFS=' '

      - name: Move each of the imported resources into the current state
        working-directory: "${{ github.event.inputs.worspace_path }}/generated/aws"
        run: |
          IFS=','
          CLEANED_RESOURCES="${{ steps.clean_input.outputs.cleaned_resources }}"
          
          for dir in $CLEANED_RESOURCES; do
            if [ -d "$dir" ]; then
              echo "Processing directory: $dir"
              (
                cd "$dir" || exit
                  IFS=' '
                  while IFS= read -r resource; do
                  terraform state mv -state=./terraform.tfstate -state-out=../../destination_terraform.tfstate "$resource" "$resource"
                  done < ./source-resources.txt
                  IFS=','
              )
            else
              echo "Directory does not exist: $dir"
            fi
          done
          IFS=' '

      - name: Replace legacy provider lines in current state
        working-directory: ${{ github.event.inputs.worspace_path }}
        run: |
          sed -i 's|registry.terraform.io/-/aws|registry.terraform.io/hashicorp/aws|g' generated/destination_terraform.tfstate

      - name: Output new state file
        working-directory: ${{ github.event.inputs.worspace_path }}
        run: |
          cat generated/destination_terraform.tfstate

      - name: Move the new state to top directory
        working-directory: ${{ github.event.inputs.worspace_path }}
        run: |
          mv generated/destination_terraform.tfstate terraform_${{ github.event.inputs.identifying_tag }}.tfstate

      - name: Move generated resource files
        working-directory: "${{ github.event.inputs.worspace_path }}/generated/aws"
        run: |
          IFS=','
          CLEANED_RESOURCES="${{ steps.clean_input.outputs.cleaned_resources }}"
          
          for dir in $CLEANED_RESOURCES; do
            if [ -d "$dir" ]; then
              echo "Processing directory: $dir"
              (
                cd "$dir" || exit
                rm provider.tf
                rm source-resources.txt
                for file in *.tf; do
                  base_name=$(basename "$file" .tf)
                  
                  # Copy the file to the parent directory with the new name
                  cp "$file" "../../../${base_name}_${{ github.event.inputs.identifying_tag }}.tf"
                done
              )
            else
              echo "Directory does not exist: $dir"
            fi
          done
          IFS=' '

      # Step 5: Commit and push generated Terraform files back to the repository
      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Add Terraform configurations from Terraformer"
          git push --set-upstream origin "${GITHUB_REF_NAME}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run a plan against the state to see what has changed
        working-directory: ${{ github.event.inputs.worspace_path }}
        run: |
          terraform plan -var-file="env/prod.tfvars"
